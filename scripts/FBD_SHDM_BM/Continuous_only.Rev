contData <- readContinuousCharacterData("data/Continuous.nex")
#taxa <- readTaxonData("data/Ages_New.csv")
#contData.addMissingTaxa( taxa )

moves    = VectorMoves()
monitors = VectorMonitors()

numTips = contData.ntaxa()
num_tips = contData.ntaxa()
taxa <- contData.taxa()
numNodes = numTips * 2 - 1
names = contData.names()
n_branches <- 2 * num_tips - 2


## FBD model
# Diversification Rates based on Therapsids
speciation_rate ~ dnExponential(5.5);
# NOTE: If it gets stuck in this script, then set origination & extinction to 1.0
moves.append(mvScale(speciation_rate, lambda=0.01, weight=5));
moves.append(mvScale(speciation_rate, lambda=0.10, weight=3));
moves.append(mvScale(speciation_rate, lambda=1.00, weight=1));

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# NOTE: FBD scripts often allow extinction to vary independently of speciation;     #
# However, empirical studies show that these two rates usually are close to equal   #
#               and they definitely are not independent.                            #
# So, here we'll make turnover (ext/orig) an independent variable and use it        #
#               to scale extinction relative to origination                         #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
turnover ~ dnUnif(0.90, 1.05); # was -1,1
moves.append(mvSlide(turnover, delta=0.01, weight=5));
moves.append(mvSlide(turnover, delta=0.10, weight=3));
moves.append(mvSlide(turnover, delta=1.00, weight=1));
extinction_rate := abs(turnover*speciation_rate)
diversification := speciation_rate - extinction_rate

# Fossil Sampling Rates based on collection occupied by Synapsids & Archosaurs
psi ~ dnExponential(1/0.072); # based on average per-ma expectations given FreqRat
completeness := psi/(extinction_rate+psi);
moves.append(mvScale(psi, lambda=0.01, weight=5));
moves.append(mvScale(psi, lambda=0.10, weight=3));
moves.append(mvScale(psi, lambda=1.00, weight=1));

# Proportional Taxon Sampling of Youngest Time Slice
rho <- .231;	# 'extant' sampling based on distribution of finds among synapsids & archosaurs contemporaneous with latest therapsids

# Establish Basal Divergence Time
#origin_time ~ dnUnif(290, 350);
origin_time ~ dnUnif(70, 100); # reset so that the latest possible FA is 0.
moves.append(mvSlide(origin_time, delta=0.01, weight=5));
moves.append(mvSlide(origin_time, delta=0.10, weight=3));
moves.append(mvSlide(origin_time, delta=1.00, weight=1));
fbd_dist = dnFBDP(originAge=origin_time, lambda=speciation_rate, mu=extinction_rate, psi=psi, rho=rho, taxa=taxa, condition = "sampling")
############################################################################
#                               Set up tree                                #
############################################################################
# create the vector of clade constraints
outgroup = clade("Biarmosuchus_tener");
lystro = clade("Lystrosaurus_hedini", "Lystrosaurus_maccaigi", "Lystrosaurus_curvatus", "Lystrosaurus_declivis", "Lystrosaurus_murrayi")
gelao = clade("Galeops_whaitsi", "Galepus_jouberti")
constraints = v(lystro, outgroup, gelao);
fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints=constraints);

#tree_read  = "data/AnalysisTree.tre"
#tree_init = readTrees(tree_read)[1]
#fbd_tree.setValue(tree_init)
moves.append(mvFNPR(fbd_tree , weight=n_branches/2));                              # time-tree pruning & grafting
moves.append(mvNNI(fbd_tree , weight=n_branches/2));                               # nearest-neighbor interchanges
moves.append(mvCollapseExpandFossilBranch(fbd_tree ,origin_time,weight=num_tips/4)); # consider ancestor-descendant rather than sister species
moves.append(mvNodeTimeSlideUniform(fbd_tree , weight=n_branches/2));              # adjust divergence times
moves.append(mvRootTimeSlideUniform(fbd_tree , origin_time, weight=5));            # adjust basal divergence time.



sigma2 ~ dnLoguniform(1e-3, 1)
sigma := 10^sigma2
moves.append(mvSlide(sigma2, delta=1.0, tune=true, weight=2.0))

#specify that we are going calculate BM likelihood using the REML PIC algorithm (see Felsenstein 1973)
traits ~ dnPhyloBrownianREML(fbd_tree, branchRates=sigma, siteRates=sigma2, nSites=contData.nchar())

bmv = model(sigma) #link sigma param w/ BM model
monitors.append(mnScreen(printgen=10, sigma2))
monitors.append(mnFile(filename="test_cont.log", printgen=400, separator = TAB,sigma2))
monitors.append(mnFile(filename="test_cont.trees", printgen=100,separator = TAB, fbd_tree))

#set up MCMC
chain = mcmc(bmv, monitors, moves)
chain.burnin(generations=50000,tuningInterval=500)

chain.run(500000)
treetrace = readTreeTrace(file = "test_cont.trees", "clock")
treefl <-outsm

#set MAP tree (we will also summarise trees as MCC representation outside revbayes
map = mapTree( file=treefl, treetrace )
q()
