set_one <- v(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_two <- v(1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_three <- v(1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_four <- v(1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_five <- v(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_six <- v(1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_seven <- v(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_eight <- v(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_nine <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_ten <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_eleven <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_twleve <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,  14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
set_thirteen <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,  15, 16, 17, 18, 19, 20, 21, 22, 23)
set_fourteen <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,  16, 17, 18, 19, 20, 21, 22, 23)
set_fifteen <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,  17, 18, 19, 20, 21, 22, 23)
set_sixteen <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,  18, 19, 20, 21, 22, 23)
set_seventeen <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,  19, 20, 21, 22, 23)
set_eighteen <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23)
set_nineteen <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,  13, 14, 15, 16, 17, 18, 19,  21, 22, 23)
set_twenty <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23)
set_twentyone <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,  14, 15, 16, 17, 18, 19, 20, 21, 23)
set_twentytwo <- v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,  13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
set_of_sets <- v(set_one, set_two, set_three, set_four, set_five, set_six, set_seven, set_eight, set_nine, set_ten, set_eleven, set_twleve, set_thirteen, set_fourteen, set_fifteen, set_sixteen, set_seventeen, set_eighteen, set_nineteen, set_twenty, set_twentyone, set_twentytwo)

i <- 1
meds <- v(0.34303488372093,5.88808695652174,0.352413793103448,0.854956043956044,0.476602272727273,0.298,1.51346478873239,0.133350649350649,7.4,0.264671428571429,9.864,11.0014084507042,1.24415581395349,0.765114754098361,0.778972972972973,0.867397058823529,0.522577777777778,0.487719298245614,0.341444444444444,0.569733333333333,1.34821212121212,0.223046511627907,0.425634146341463)
while (i < 23){
	by_state[i] <- contData
	by_state[i].excludeCharacter(set_of_sets[i])

  #branch_thetas[1] <- 0
  sigma2 ~ dnLoguniform(1e-3, 1);
  moves.append(mvScale(sigma2, weight=2.0));

  root_age := timetree.rootAge();
  alpha ~ dnExponential(lambda=abs(0.5*abs(root_age)/ln(2.0)));
  alpha ~ dnExponential(lambda=abs(0.5*abs(root_age)/ln(2.0)));
  moves.append(mvScale(alpha, weight=1.0));

  theta_root ~ dnUniform(0, 15);
  theta_root.setValue(meds[i])
  moves.append(mvSlide(theta_root, weight=1.0));

  expected_number_of_shifts <- 230;
  shift_probability <- expected_number_of_shifts / num_branches;
  shift_distribution = dnNormal(0, 0.587);
  for (x in num_branches:1) {
  # draw the theta shift from a mixture distribution;
    branch_deltas[x] ~ dnReversibleJumpMixture(0, shift_distribution, Probability(1 - shift_probability));
    # compute the theta for the branch;
    if (timetree.isRoot(timetree.parent(x))) {
       branch_thetas[x] := theta_root + abs(branch_deltas[x]);
        } else {
       branch_thetas[x] := branch_thetas[timetree.parent(x)] + abs(branch_deltas[x]);
        }
    # keep track of whether the branch has a shift;
    branch_theta_shift[x] := ifelse(branch_deltas[x] == 0, 0, 1);

    # use reversible-jump to move between models with and without;
    # shifts on the branch;
    moves.append(mvRJSwitch(branch_deltas[x], weight=1));

    # include proposals on the shift (when it is not 1);
    moves.append(mvScale(branch_deltas[x], weight=1));
    }

  num_theta_changes := sum(branch_theta_shift);
  phyContinuous[i] ~ dnPhyloOrnsteinUhlenbeckREML(timetree, alpha, branch_thetas, sigma2, rootStates=theta_root);
  phyContinuous[i].clamp(by_state[i]);
  i <- i +1 
}
