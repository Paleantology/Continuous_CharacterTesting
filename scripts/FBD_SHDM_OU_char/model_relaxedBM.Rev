##########################
# Specify the rate model #
##########################

# specify the rate at the root
sigma2_root ~ dnLoguniform(1e-5, 1e-1)

moves.append( mvScale(sigma2_root, weight=1.0) )


# specify the prior on the number of rate shifts
expected_number_of_shifts <- 5
rate_shift_probability    <- expected_number_of_shifts / num_branches

# specify the prior on the magnitude of rate shifts
sd = 0.578
rate_shift_distribution = dnLognormal(0, sd)



# specify the branch-specific rates
for(i in num_branches:1) {

    # draw the rate multiplier from a mixture distribution
    branch_rate_multiplier[i] ~ dnReversibleJumpMixture(1, rate_shift_distribution, Probability(1 - rate_shift_probability) )

    # compute the rate for the branch
    if ( timetree.isRoot( timetree.parent(i) ) ) {
       continuous_rates[i] := sigma2_root * branch_rate_multiplier[i]
    } else {
       continuous_rates[i] := continuous_rates[timetree.parent(i)] * branch_rate_multiplier[i]
    }

    # keep track of whether the branch has a rate shift
    branch_rate_shift[i] := ifelse( branch_rate_multiplier[i] == 1, 0, 1 )

    # use reversible-jump to move between models with and without
    # shifts on the branch
    moves.append( mvRJSwitch(branch_rate_multiplier[i], weight=1) )

    # include proposals on the rate mutliplier (when it is not 1)
    moves.append( mvScale(branch_rate_multiplier[i], weight=1) )

}

# keep track of the number of rate shifts
num_rate_changes := sum( branch_rate_shift )

##########################
# Specify the BM process #
##########################

X ~ dnPhyloBrownianREML(timetree, branchRates=continuous_rates^0.5)
X.clamp(contData)
