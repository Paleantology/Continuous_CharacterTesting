###########################################
# Binary discDatalogical substitution model #
###########################################
# We assume a strict  clock rate, drawn from an exponential prior #
#clock_discData ~ dnExponential(1.0)

#moves.append( mvScale(clock_discData, lambda=0.01, weight=4.0) )
#moves.append( mvScale(clock_discData, lambda=0.1,  weight=4.0) )
#moves.append( mvScale(clock_discData, lambda=1,    weight=4.0) )


#Set up Gamma-distributed rate variation.
alpha_discData ~ dnExponential( 1.0 )
rates_discData := fnDiscretizeGamma( alpha_discData, alpha_discData, 4 )

#Moves on the parameters to the Gamma distribution.
moves.append( mvScale(alpha_discData, lambda=0.01, weight=5.0) )
moves.append( mvScale(alpha_discData, lambda=0.1,  weight=3.0) )
moves.append( mvScale(alpha_discData, lambda=1,    weight=1.0) )

n_max_states <- 9 #set the largest character state in your multistate matrix here
idx = 1
discData_bystate[1] <- discData
for (i in 2:n_max_states) {
    discData_bystate[i] <- discData                                # make local tmp copy of data
    discData_bystate[i].setNumStatesPartition(i)                 # only keep character blocks with state space equal to size i
    nc = discData_bystate[i].nchar()                             # get number of characters per character size with i-sized states
    if (nc > 0) {                                              # for non-empty character blocks
        Q_discData[idx] <- fnJC(i)                                      # make i-by-i rate matrix
        m_morph[idx] ~ dnPhyloCTMC(tree=timetree,
                                    Q=Q_discData[idx],
                                    nSites=nc,
                                    siteRates=rates_discData,
                                    branchRates=branch_rates,
                                    type="Standard")           # create model of evolution for the character block
        Q_discData[idx]
        m_morph[idx].clamp(discData_bystate[i])                  # attach the data
        m_morph[idx]

        idx = idx + 1                                          # increment counter
    }
}
