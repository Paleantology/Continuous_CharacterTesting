clock_cont ~ dnLoguniform(1e-3, 1)
moves.append( mvScale(clock_cont, weight=1.0) )

expected_number_of_shifts <- 2
rate_shift_probability    <- expected_number_of_shifts / n_branches
rate_shift_probability
sd = 0.578
rate_shift_distribution = dnLognormal(-sd^2/2, sd)
rate_shift_distribution
for(x in 213:1) {
    # draw the rate multiplier from a mixture distribution
    branch_rate_multiplier[x] = dnReversibleJumpMixture(1, rate_shift_distribution, Probability(1 - rate_shift_probability) )
    branch_rate_multiplier[x]
    # compute the rate for the branch
    if ( timetree.isRoot( timetree.parent(x) ) ) {
       branch_rates[x] := clock_cont * branch_rate_multiplier[x]
       branch_rates[x]
    } else {
       branch_rates[x] := branch_rates[timetree.parent(x)] * branch_rate_multiplier[x]
    }
    # keep track of whether the branch has a rate shift
    branch_rate_shift[x] := ifelse( branch_rate_multiplier[x] == 1, 0, 1 )
    branch_rate_shift[x]
    # use reversible-jump to move between models with and without
    # shifts on the branch
    moves.append( mvRJSwitch(branch_rate_multiplier[x], weight=1) )

    # include proposals on the rate mutliplier (when it is not 1)
    moves.append( mvScale(branch_rate_multiplier[x], weight=1) )
}

num_rate_changes := sum( branch_rate_shift )

sigma2 ~ dnLoguniform(1e-3, 1)
moves.append( mvScale(sigma2, weight=1.0) )
X ~ dnPhyloBrownianREML(timetree, branchRates=sigma2^0.5, nSites = 23)
X
X.clamp(c_chars)
