################################
# Global molecular clock model #
################################

# we assume a strict morphological clock rate, drawn from an exponential prior #
branch_rates ~ dnExponential(10.0)

moves.append( mvScale(branch_rates,lambda=0.5,tune=true,weight=3.0) )


##################################################################
# Birth-Death Process prior on the topology and speciation times #
##################################################################

# Define exponential priors on the birth rate and death rate #
speciation_rate ~ dnExponential(10)
extinction_rate ~ dnExponential(10)

# Specify a scale move on the speciation_rate parameter #
moves.append( mvScale(speciation_rate, lambda=0.5,tune=true,weight=3.0) )

# Specify a scale move on the extinction_rate parameter #
moves.append( mvScale(extinction_rate, lambda=0.5,tune=true,weight=3.0) )

# Create deterministic nodes for the diversification and turnover rates to monitor these parameters #
diversification := speciation_rate - extinction_rate
turnover := extinction_rate/speciation_rate

# Fix the probability of sampling parameter (rho) to 1 #
# because all extant bears are represented in our analysis #
rho <- 1.0

# Fix the age of the root to 1 #
extant_mrca <- 300

# Define the tree-prior distribution as the birth-death process #
tree_dist = dnBDP(lambda=speciation_rate, mu=extinction_rate, rho=rho, rootAge=extant_mrca, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)

# create the vector of clade constraints
outgroup = clade("Biarmosuchus_tener");
lystro = clade("Lystrosaurus_hedini", "Lystrosaurus_maccaigi", "Lystrosaurus_curvatus", "Lystrosaurus_declivis", "Lystrosaurus_murrayi")
gelao = clade("Galeops_whaitsi", "Galepus_jouberti")
constraints = v(outgroup, lystro, gelao);
timetree ~ dnConstrainedTopology(tree_dist, constraints=constraints)

# Specify moves on the tree and node times #
moves.append( mvNarrow(timetree, weight=n_taxa) )
moves.append( mvFNPR(timetree, weight=n_taxa/4.0) )
moves.append( mvNodeTimeSlideUniform(timetree, weight=n_taxa) )
moves.append( mvSubtreeScale(timetree, weight=n_taxa/5.0) )
