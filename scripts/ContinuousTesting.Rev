## Basic setup and helper variables

#c_chars <- readContinuousCharacterData("data/Continuous.nex")
d_chars <- readDiscreteCharacterData("data/Kammerer2019.nex")
taxa <- readTaxonData("data/Therapsid_Ages.csv")
moves    = VectorMoves()
monitors = VectorMonitors()

#c_chars.addMissingTaxa( taxa )
d_chars.addMissingTaxa( taxa )


n_tips <- taxa.size()
num_branches <- 2 * n_tips - 3
source("scripts/foss.Rev")
n_branch <- fbd_tree.ntips()
n_branch
# The rate along each branch is drawn from an exponential prior

     clock_morpho ~ dnExponential(1.0)

     moves.append( mvScale(clock_morpho, lambda=0.01, weight=4.0) )
     moves.append( mvScale(clock_morpho, lambda=0.1,  weight=4.0) )
     moves.append( mvScale(clock_morpho, lambda=1,    weight=4.0) )

clock_morpho


# Moves on the parameters to the Gamma distribution.
    alpha_morpho ~ dnUniform( 0, 1E6 )
    rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )
    moves.append(mvScale(alpha_morpho, lambda=1, weight=2.0))

#    beta_scale ~ dnLognormal( 0.0, sd=2*0.587405 )
#    moves.append( mvScale(beta_scale, lambda=1, weight=5.0 ) )

#      cats := fnDiscretizeBeta(beta_scale, beta_scale, 7)
#      for (x in 1:cats.size())
#      {
#        q[x] := fnF81(simplex(cats))
#        }
#        mat_prior <- rep(1,7)
#        matrix_probs ~ dnDirichlet(mat_prior)
#        moves.append( mvBetaSimplex(matrix_probs, weight=3.0) )
#        moves.append( mvDirichletSimplex(matrix_probs, weight=1.5) )
     n_max_states <- 3
     idx = 1
     morpho_f_bystate <- d_chars.setNumStatesVector()
     for (i in 1:n_max_states) {
         nc = morpho_f_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=rates_morpho,
                                         branchRates=clock_morpho,
                                         type="Standard")

             # attach the data
     	    m_morph[idx].clamp(morpho_f_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

#sigma2_root ~ dnLoguniform(1e-3, 1)
#oves.append( mvScale(sigma2_root, weight=1.0) )

#expected_number_of_shifts <- 2
#rate_shift_probability    <- expected_number_of_shifts / num_branches

#sd = 0.578
#rate_shift_distribution = dnLognormal(-sd^2/2, sd)

#for(x in num_branches:1) {
    # draw the rate multiplier from a mixture distribution
#    branch_rate_multiplier[x] ~ dnReversibleJumpMixture(1, rate_shift_distribution, Probability(1 - rate_shift_probability) )
    # compute the rate for the branch
#    if ( fbd_tree.isRoot( fbd_tree.parent(x) ) ) {
#       branch_rates[x] := sigma2_root * branch_rate_multiplier[x]
#    } else {
#       branch_rates[x] := branch_rates[fbd_tree.parent(x)] * branch_rate_multiplier[x]
#    }
    # keep track of whether the branch has a rate shift
#    branch_rate_shift[x] := ifelse( branch_rate_multiplier[x] == 1, 0, 1 )
#    branch_rate_shift[x]
    # use reversible-jump to move between models with and without
    # shifts on the branch
#    moves.append( mvRJSwitch(branch_rate_multiplier[x], weight=1) )

    # include proposals on the rate mutliplier (when it is not 1)
#    moves.append( mvScale(branch_rate_multiplier[x], weight=1) )
#}

#num_rate_changes := sum( branch_rate_shift )

#sigma2 ~ dnLoguniform(1e-3, 1)
#moves.append( mvScale(sigma2, weight=1.0) )
#X ~ dnPhyloBrownianREML(fbd_tree, branchRates=sigma2^0.5, nSites = 23)
#X
#X.clamp(c_chars)



mymodel = model(fbd_tree)
monitors.append( mnModel(filename="output/simple_BM.log", printgen=10) )
monitors.append( mnScreen(printgen=1000)) #, sigma2) )
monitors.append(mnFile(filename="output/parted.trees", printgen=10, fbd_tree))
mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.run(generations=500000)
q()
