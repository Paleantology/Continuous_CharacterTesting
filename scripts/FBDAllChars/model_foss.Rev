## FBD model
# Diversification Rates based on Therapsids
speciation_rate ~ dnExponential(5.5);
#speciation_rate.setValue(1)
# NOTE: If it gets stuck in this script, then set origination & extinction to 1.0
moves.append(mvScale(speciation_rate, lambda=0.01, weight=5));
moves.append(mvScale(speciation_rate, lambda=0.10, weight=3));
moves.append(mvScale(speciation_rate, lambda=1.00, weight=1));

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# NOTE: FBD scripts often allow extinction to vary independently of speciation;     #
# However, empirical studies show that these two rates usually are close to equal   #
#               and they definitely are not independent.                            #
# So, here we'll make turnover (ext/orig) an independent variable and use it        #
#               to scale extinction relative to origination                         #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
turnover ~ dnUnif(0.90, 1.05); # was -1,1
moves.append(mvSlide(turnover, delta=0.01, weight=5));
moves.append(mvSlide(turnover, delta=0.10, weight=3));
moves.append(mvSlide(turnover, delta=1.00, weight=1));
extinction_rate := abs(turnover*speciation_rate)
diversification := speciation_rate - extinction_rate

# old extinction stuff. We should not use this, as extinction should not be independent of origination!
#extinction_rate ~ dnExponential(10);
#extinction_rate.setValue(.001)
#moves.append(mvScale(extinction_rate, lambda=0.01, weight=5));
#moves.append(mvScale(extinction_rate, lambda=0.10, weight=3));
#moves.append(mvScale(extinction_rate, lambda=1.00, weight=1));
#turnover := extinction_rate/speciation_rate;

# Fossil Sampling Rates based on collection occupied by Synapsids & Archosaurs
psi ~ dnExponential(1/0.072); # based on average per-ma expectations given FreqRat
completeness := psi/(extinction_rate+psi);
moves.append(mvScale(psi, lambda=0.01, weight=5));
moves.append(mvScale(psi, lambda=0.10, weight=3));
moves.append(mvScale(psi, lambda=1.00, weight=1));

# Proportional Taxon Sampling of Youngest Time Slice
rho <- .231;	# 'extant' sampling based on distribution of finds among synapsids & archosaurs contemporaneous with latest therapsids

# Establish Basal Divergence Time
origin_time ~ dnUnif(300, 400); # reset so that the latest possible FA is 0.
origin_time

moves.append(mvSlide(origin_time, delta=0.01, weight=5));
moves.append(mvSlide(origin_time, delta=0.10, weight=3));
moves.append(mvSlide(origin_time, delta=1.00, weight=1));
fbd_dist = dnFBDRP(originAge=origin_time, lambda=speciation_rate, mu=extinction_rate, psi=psi, rho=rho, taxa=taxa)
############################################################################
#                               Set up tree                                #
############################################################################
# create the vector of clade constraints
outgroup = clade("Biarmosuchus_tener");
kannemeyeriformes = clade("Wadiasaurus_indicus", "Kannemeyeria_simocephalus", "Kannemeyeria_lophorhinus", "Dolichuranus_primaevus", "Dolichuranus_primaevus", "Uralokannemeyeria_vjuschkovi","Rechnisaurus_cristarhynchus", "Rhadiodromus", "Shaanbeikannemeyeria_sp.","Xiyukannemeyeria_brevirostris", "Parakannemeyeria_sp.", "Sinokannemeyeria_sp.","Ischigualastia_jenseni", "Jachaleria_sp.", "Eubrachiosaurus_browni", "Sangusaurus_parringtonii","Stahleckeria_potens", "Moghreberia_nmachouensis", "Placerias_hesternus", "Zambiasaurus_submersus","Angonisaurus_cruickshanki", "Dinodontosaurus_Sp.", "Vinceria_andina", "Tetragonias_njalilus","Shansiodon_sp.")
#lystro = clade("Lystrosaurus_hedini", "Lystrosaurus_maccaigi", "Lystrosaurus_curvatus",
#"Lystrosaurus_declivis", "Lystrosaurus_murrayi")

constraints = v(kannemeyeriformes);

#tree <- simStartingTree(taxa, constraints)
timetree ~ dnConstrainedTopology(fbd_dist,constraints=constraints);
#imetree.setValue(tree)
moves.append(mvFNPR(timetree , weight=n_branches/2));                              # time-tree pruning & grafting
moves.append(mvNNI(timetree , weight=n_branches/2));                               # nearest-neighbor interchanges
moves.append(mvCollapseExpandFossilBranch(timetree ,origin_time,weight=n_tips/4)); # consider ancestor-descendant rather than sister species
moves.append(mvNodeTimeSlideUniform(timetree , weight=n_branches/2));              # adjust divergence times
moves.append(mvRootTimeSlideUniform(timetree , origin_time, weight=5));            # adjust basal divergence time.

num_samp_anc := timetree.numSampledAncestors();

# Setup the fossil tip sampling #
# Use a for loop to create a uniform distribution on the occurence time for each fossil #
# The boundaries of the uniform distribution are specified in the tsv file #
### Use stratigraphic range data to explicitly sample the fossil occurence times ###
# Use a for loop to create a uniform distribution on the occurence time for each fossil #
# The boundaries of the uniform distribution are specified in the tsv file #

fossils = timetree.getFossils()
for(i in 1:fossils.size())
{
    t[i] := tmrca(timetree, clade(fossils[i]))
    a_i = fossils[i].getMinAge()
    b_i = fossils[i].getMaxAge()
    F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
   F[i].clamp( 0 )
}

# Add a move to sample the fossil times #
moves.append( mvFossilTimeSlideUniform(timetree, origin_time, weight=5.0) )
